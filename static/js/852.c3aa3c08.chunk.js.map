{"version":3,"file":"static/js/852.c3aa3c08.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/EditModal/EditModal.styled.js","components/EditModal/EditModal.jsx","components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/Notification/Notification.module.css?a91f","components/Notification/Notification.jsx","redux/contacts/selectors.js","pages/ContactsPage/ContactsPage.styled.js","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const FormStyled = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport * as yup from 'yup';\nimport 'yup-phone';\nimport { useFormik } from 'formik';\nimport { Button, TextField } from '@mui/material';\n\nimport { addContact } from 'redux/contacts/operations';\nimport { FormStyled } from './ContactForm.styled';\n\nlet schema = yup.object().shape({\n  name: yup.string().min(3).required(),\n  number: yup.string().phone('UA').required(),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.contacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === values.name.toLowerCase()\n      )\n    ) {\n      alert(`${values.name} is already in contacts.`);\n      return;\n    }\n    dispatch(addContact(values));\n\n    resetForm();\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n    validationSchema: schema,\n    onSubmit: handleSubmit,\n  });\n  return (\n    // <Formik\n    //   initialValues={initialValues}\n    //   validationSchema={schema}\n    //   onSubmit={handleSubmit}\n    // >\n    //   <form>\n    //     <FormLabel htmlFor=\"name\">\n    //       Name\n    //       <Input\n    //         type=\"text\"\n    //         name=\"name\"\n    //         pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n    //         title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    //         placeholder=\"Name\"\n    //         required\n    //       />\n    //       <FormError name=\"name\" />\n    //     </FormLabel>\n\n    //     <FormLabel htmlFor=\"number\">\n    //       Number\n    //       <Input\n    //         type=\"tel\"\n    //         name=\"number\"\n    //         pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n    //         title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n    //         placeholder=\"Number\"\n    //         required\n    //       />\n    //       <FormError name=\"number\" />\n    //     </FormLabel>\n    //     <AddBtn type=\"submit\">Add contact</AddBtn>\n    //   </form>\n    // </Formik>\n\n    <FormStyled onSubmit={formik.handleSubmit}>\n      <TextField\n        fullWidth\n        id=\"name\"\n        name=\"name\"\n        label=\"name\"\n        value={formik.values.name}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.name && Boolean(formik.errors.name)}\n        helperText={formik.touched.name && formik.errors.name}\n      />\n      <TextField\n        fullWidth\n        id=\"number\"\n        name=\"number\"\n        label=\"number\"\n        type=\"tel\"\n        value={formik.values.number}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.number && Boolean(formik.errors.number)}\n        helperText={formik.touched.number && formik.errors.number}\n      />\n\n      <Button color=\"primary\" variant=\"contained\" fullWidth type=\"submit\">\n        Add contact\n      </Button>\n    </FormStyled>\n  );\n};\n","import styled from '@emotion/styled';\nimport { Box, Typography } from '@mui/material';\n\nexport const BoxStyled = styled(Box)`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n  transform: translate(-50%, -50%);\n  width: 280px;\n  padding: 10px;\n  background-color: ${p => p.theme.palette.background.modal};\n`;\n\nexport const FormStyled = styled.form`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  gap: 14px;\n`;\n\nexport const BoxWpap = styled(Box)`\n  display: flex;\n  justify-content: center;\n  gap: 14px;\n`;\n\nexport const TypographyStyled = styled(Typography)`\n  color: ${p => p.theme.palette.text.primary};\n`;\n","import { useDispatch } from 'react-redux';\nimport * as yup from 'yup';\nimport 'yup-phone';\nimport { useFormik } from 'formik';\nimport { Modal, Button, TextField } from '@mui/material';\n\nimport {\n  BoxStyled,\n  FormStyled,\n  BoxWpap,\n  TypographyStyled,\n} from './EditModal.styled';\nimport { editContact } from 'redux/contacts/operations';\n\nlet schema = yup.object().shape({\n  name: yup.string().min(3).required(),\n  number: yup.string().phone('UA').required(),\n});\n\nexport const EditModal = ({ id, open, handleClose, name, number }) => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = value => {\n    const updateContact = {\n      id: id,\n      ...value,\n    };\n\n    dispatch(editContact(updateContact));\n    handleClose();\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      name: name,\n      number: number,\n    },\n    validationSchema: schema,\n    onSubmit: handleSubmit,\n  });\n\n  return (\n    <Modal\n      open={open}\n      onClose={handleClose}\n      aria-labelledby=\"modal-modal-title\"\n      aria-describedby=\"modal-modal-description\"\n    >\n      <BoxStyled>\n        <TypographyStyled id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n          Edit contact\n        </TypographyStyled>\n\n        <FormStyled onSubmit={formik.handleSubmit}>\n          <TextField\n            fullWidth\n            id=\"name\"\n            name=\"name\"\n            label=\"name\"\n            value={formik.values.name}\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            error={formik.touched.name && Boolean(formik.errors.name)}\n            helperText={formik.touched.name && formik.errors.name}\n          />\n          <TextField\n            fullWidth\n            id=\"number\"\n            name=\"number\"\n            label=\"number\"\n            type=\"tel\"\n            value={formik.values.number}\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            error={formik.touched.number && Boolean(formik.errors.number)}\n            helperText={formik.touched.number && formik.errors.number}\n          />\n          <BoxWpap>\n            <Button sx={{ color: '#4caf50' }} fullWidth type=\"submit\">\n              save\n            </Button>\n            <Button sx={{ color: '#f44336' }} onClick={handleClose}>\n              Cancel\n            </Button>\n          </BoxWpap>\n        </FormStyled>\n      </BoxStyled>\n    </Modal>\n  );\n};\n","import styled from '@emotion/styled';\n\nimport { ListItemText, ListItem, Checkbox } from '@mui/material';\n\nexport const ListItemTextStyled = styled(ListItemText)`\n  color: ${p => p.theme.palette.text.primary};\n`;\n\nexport const ListItemStyled = styled(ListItem)`\n  padding-left: 0;\n`;\n\nexport const CheckboxStyled = styled(Checkbox)`\n  @media screen and (max-width: 400px) {\n    padding-left: 0;\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { AccountCircle, Delete, Edit } from '@mui/icons-material';\nimport { ListItemAvatar, IconButton, Tooltip, Avatar } from '@mui/material';\nimport FavoriteBorder from '@mui/icons-material/FavoriteBorder';\nimport Favorite from '@mui/icons-material/Favorite';\nimport { EditModal } from 'components/EditModal/EditModal';\nimport {\n  ListItemTextStyled,\n  ListItemStyled,\n  CheckboxStyled,\n} from './ContactItem.styled';\n\nexport const ContactItem = ({\n  id,\n  name,\n  number,\n  phone,\n  handleAddFavorite,\n  favorite,\n}) => {\n  const [open, setOpen] = useState(false);\n  const [checked, setChecked] = useState(false);\n\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  const dispatch = useDispatch();\n\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  const handleChangeCheckbox = () => {\n    handleAddFavorite(id);\n  };\n\n  const isFavorite = favorite.includes(id);\n\n  useEffect(() => {\n    setChecked(isFavorite);\n  }, [isFavorite]);\n\n  return (\n    <ListItemStyled\n      secondaryAction={\n        <>\n          <Tooltip title=\"Edit\">\n            <IconButton edge=\"end\" aria-label=\"edit\" onClick={handleOpen}>\n              <Edit />\n            </IconButton>\n          </Tooltip>\n\n          <Tooltip title=\"Delete\">\n            <IconButton edge=\"end\" aria-label=\"delete\" onClick={handleDelete}>\n              <Delete />\n            </IconButton>\n          </Tooltip>\n          <EditModal\n            open={open}\n            handleClose={handleClose}\n            id={id}\n            name={name}\n            number={number}\n          />\n        </>\n      }\n    >\n      <CheckboxStyled\n        label=\"favorite\"\n        size=\"small\"\n        icon={<FavoriteBorder />}\n        checkedIcon={<Favorite />}\n        onChange={handleChangeCheckbox}\n        checked={checked}\n      />\n      <ListItemAvatar>\n        <Avatar>\n          <AccountCircle />\n        </Avatar>\n      </ListItemAvatar>\n      <ListItemTextStyled primary={name} secondary={number || phone} />\n    </ListItemStyled>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string,\n};\n","import { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { ContactItem } from 'components/ContactItem';\n\nexport const ContactList = () => {\n  const [favorite, setFavorite] = useState(\n    JSON.parse(localStorage.getItem('favorite')) ?? []\n  );\n\n  const contacts = useSelector(state => state.contacts.contacts);\n  const filter = useSelector(state => state.filter);\n\n  const normalizedFilter = filter.toLowerCase();\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n\n  const handleAddFavorite = id => {\n    setFavorite(prevFavorite =>\n      prevFavorite.includes(id)\n        ? prevFavorite.filter(favId => favId !== id)\n        : [...prevFavorite, id]\n    );\n  };\n\n  useEffect(() => {\n    localStorage.setItem('favorite', JSON.stringify(favorite));\n  }, [favorite]);\n\n  return (\n    <ul>\n      {filteredContacts\n        .sort((a, b) => a.name.localeCompare(b.name))\n        .map(({ id, name, phone, number }) => (\n          <ContactItem\n            key={id}\n            id={id}\n            name={name}\n            phone={phone}\n            number={number}\n            handleAddFavorite={handleAddFavorite}\n            favorite={favorite}\n          />\n        ))}\n    </ul>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { TextField } from '@mui/material';\nimport { filterChange } from 'redux/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleFilter = event => {\n    dispatch(filterChange(event.currentTarget.value));\n  };\n\n  return (\n    <TextField\n      id=\"filled-search\"\n      label=\"Put the name for search\"\n      type=\"search\"\n      variant=\"filled\"\n      onChange={handleFilter}\n    />\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"msgText\":\"Notification_msgText__Ij0Ua\"};","import PropTypes from 'prop-types';\nimport css from './Notification.module.css';\n\nexport function Notification({ msg }) {\n  return <p className={css.msgText}>{msg}</p>;\n}\n\nNotification.propTypes = {\n  msg: PropTypes.string.isRequired,\n};","export const getContacts = state => state.contacts.contacts;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n\nexport const getStatusFilter = state => state.filter;","import styled from '@emotion/styled';\nimport { Box, Typography } from '@mui/material';\n\nexport const WrapPage = styled(Box)`\n  padding: 100px 10px 30px 10px;\n  height: 100dvh;\n`;\n\nexport const MainBox = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  gap: 14px;\n  margin: 0 auto;\n  max-width: 350px;\n\n  padding: 12px;\n  border-radius: 16px;\n  background-color: ${p => p.theme.palette.background.secondary};\n`;\n\nexport const TypographyStyled = styled(Typography)`\n  font-weight: 700;\n  text-align: center;\n  color: ${p => p.theme.palette.text.primary};\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Toaster } from 'react-hot-toast';\n\nimport { ContactForm } from 'components/ContactForm';\nimport { ContactList } from 'components/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Notification } from 'components/Notification/Notification';\nimport { getError, getIsLoading } from 'redux/contacts/selectors';\n\nimport { fetchContacts } from 'redux/contacts/operations';\n\nimport { MainBox, TypographyStyled, WrapPage } from './ContactsPage.styled';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  const contacts = useSelector(state => state.contacts.contacts);\n  const filter = useSelector(state => state.filter);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <WrapPage>\n      <MainBox>\n        <Toaster position=\"top-center\" reverseOrder={false} />\n\n        <TypographyStyled variant=\"h4\" component=\"h1\">\n          Phonebook\n        </TypographyStyled>\n\n        <ContactForm />\n\n        <TypographyStyled variant=\"h5\" component=\"h2\">\n          Contacts\n        </TypographyStyled>\n\n        {contacts.length > 0 || filter ? (\n          <Filter />\n        ) : (\n          <Notification msg=\"No contacts added\" />\n        )}\n        {isLoading && !error && <b>Request in progress...</b>}\n\n        <ContactList />\n      </MainBox>\n    </WrapPage>\n  );\n}\n"],"names":["FormStyled","styled","schema","yup","shape","name","min","required","number","phone","ContactForm","dispatch","useDispatch","contacts","useSelector","state","formik","useFormik","initialValues","validationSchema","onSubmit","values","resetForm","some","contact","toLowerCase","alert","addContact","handleSubmit","TextField","fullWidth","id","label","value","onChange","handleChange","onBlur","handleBlur","error","touched","Boolean","errors","helperText","type","Button","color","variant","BoxStyled","Box","p","theme","palette","background","modal","BoxWpap","TypographyStyled","Typography","text","primary","EditModal","open","handleClose","updateContact","editContact","Modal","onClose","component","sx","onClick","ListItemTextStyled","ListItemText","ListItemStyled","ListItem","CheckboxStyled","Checkbox","ContactItem","handleAddFavorite","favorite","useState","setOpen","checked","setChecked","isFavorite","includes","useEffect","secondaryAction","Tooltip","title","IconButton","edge","Edit","deleteContact","Delete","size","icon","FavoriteBorder","checkedIcon","Favorite","ListItemAvatar","Avatar","AccountCircle","secondary","ContactList","JSON","parse","localStorage","getItem","setFavorite","normalizedFilter","filter","filteredContacts","prevFavorite","favId","setItem","stringify","sort","a","b","localeCompare","map","Filter","event","filterChange","currentTarget","Notification","msg","className","css","getIsLoading","isLoading","getError","WrapPage","MainBox","ContactsPage","fetchContacts","position","reverseOrder","length"],"sourceRoot":""}