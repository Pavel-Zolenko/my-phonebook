{"version":3,"file":"static/js/586.4c2425e5.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/EditModal/EditModal.styled.js","components/EditModal/EditModal.jsx","components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/Notification/Notification.styled.js","components/Notification/Notification.jsx","redux/contacts/selectors.js","pages/ContactsPage/ContactsPage.styled.js","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const FormStyled = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport * as yup from 'yup';\nimport 'yup-phone';\nimport { useFormik } from 'formik';\nimport { Button, TextField } from '@mui/material';\n\nimport { addContact } from 'redux/contacts/operations';\nimport { FormStyled } from './ContactForm.styled';\n\nlet schema = yup.object().shape({\n  name: yup.string().min(3).required(),\n  number: yup.string().phone('UA').required(),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.contacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === values.name.toLowerCase()\n      )\n    ) {\n      alert(`${values.name} is already in contacts.`);\n      return;\n    }\n    dispatch(addContact(values));\n\n    resetForm();\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n    validationSchema: schema,\n    onSubmit: handleSubmit,\n  });\n  return (\n    // <Formik\n    //   initialValues={initialValues}\n    //   validationSchema={schema}\n    //   onSubmit={handleSubmit}\n    // >\n    //   <form>\n    //     <FormLabel htmlFor=\"name\">\n    //       Name\n    //       <Input\n    //         type=\"text\"\n    //         name=\"name\"\n    //         pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n    //         title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    //         placeholder=\"Name\"\n    //         required\n    //       />\n    //       <FormError name=\"name\" />\n    //     </FormLabel>\n\n    //     <FormLabel htmlFor=\"number\">\n    //       Number\n    //       <Input\n    //         type=\"tel\"\n    //         name=\"number\"\n    //         pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n    //         title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n    //         placeholder=\"Number\"\n    //         required\n    //       />\n    //       <FormError name=\"number\" />\n    //     </FormLabel>\n    //     <AddBtn type=\"submit\">Add contact</AddBtn>\n    //   </form>\n    // </Formik>\n\n    <FormStyled onSubmit={formik.handleSubmit}>\n      <TextField\n        fullWidth\n        id=\"name\"\n        name=\"name\"\n        label=\"name\"\n        value={formik.values.name}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.name && Boolean(formik.errors.name)}\n        helperText={formik.touched.name && formik.errors.name}\n      />\n      <TextField\n        fullWidth\n        id=\"number\"\n        name=\"number\"\n        label=\"number\"\n        type=\"tel\"\n        value={formik.values.number}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.number && Boolean(formik.errors.number)}\n        helperText={formik.touched.number && formik.errors.number}\n      />\n\n      <Button color=\"primary\" variant=\"contained\" fullWidth type=\"submit\">\n        Add contact\n      </Button>\n    </FormStyled>\n  );\n};\n","import styled from '@emotion/styled';\nimport { Box, Typography } from '@mui/material';\n\nexport const BoxStyled = styled(Box)`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n  transform: translate(-50%, -50%);\n  width: 280px;\n  padding: 10px;\n  background-color: ${p => p.theme.palette.background.modal};\n`;\n\nexport const FormStyled = styled.form`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  gap: 14px;\n`;\n\nexport const BoxWpap = styled(Box)`\n  display: flex;\n  justify-content: center;\n  gap: 14px;\n`;\n\nexport const TypographyStyled = styled(Typography)`\n  color: ${p => p.theme.palette.text.primary};\n`;\n","import { useDispatch } from 'react-redux';\nimport * as yup from 'yup';\nimport 'yup-phone';\nimport { useFormik } from 'formik';\nimport { Modal, Button, TextField } from '@mui/material';\n\nimport {\n  BoxStyled,\n  FormStyled,\n  BoxWpap,\n  TypographyStyled,\n} from './EditModal.styled';\nimport { editContact } from 'redux/contacts/operations';\n\nlet schema = yup.object().shape({\n  name: yup.string().min(3).required(),\n  number: yup.string().phone('UA').required(),\n});\n\nexport const EditModal = ({ id, open, handleClose, name, number }) => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = value => {\n    const updateContact = {\n      id: id,\n      ...value,\n    };\n\n    dispatch(editContact(updateContact));\n    handleClose();\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      name: name,\n      number: number,\n    },\n    validationSchema: schema,\n    onSubmit: handleSubmit,\n  });\n\n  return (\n    <Modal\n      open={open}\n      onClose={handleClose}\n      aria-labelledby=\"modal-modal-title\"\n      aria-describedby=\"modal-modal-description\"\n    >\n      <BoxStyled>\n        <TypographyStyled id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n          Edit contact\n        </TypographyStyled>\n\n        <FormStyled onSubmit={formik.handleSubmit}>\n          <TextField\n            fullWidth\n            id=\"name\"\n            name=\"name\"\n            label=\"name\"\n            value={formik.values.name}\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            error={formik.touched.name && Boolean(formik.errors.name)}\n            helperText={formik.touched.name && formik.errors.name}\n          />\n          <TextField\n            fullWidth\n            id=\"number\"\n            name=\"number\"\n            label=\"number\"\n            type=\"tel\"\n            value={formik.values.number}\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            error={formik.touched.number && Boolean(formik.errors.number)}\n            helperText={formik.touched.number && formik.errors.number}\n          />\n          <BoxWpap>\n            <Button sx={{ color: '#4caf50' }} fullWidth type=\"submit\">\n              save\n            </Button>\n            <Button sx={{ color: '#f44336' }} onClick={handleClose}>\n              Cancel\n            </Button>\n          </BoxWpap>\n        </FormStyled>\n      </BoxStyled>\n    </Modal>\n  );\n};\n","import styled from '@emotion/styled';\n\nimport { ListItemText, ListItem, Checkbox } from '@mui/material';\n\nexport const ListItemTextStyled = styled(ListItemText)`\n  color: ${p => p.theme.palette.text.primary};\n`;\n\nexport const ListItemStyled = styled(ListItem)`\n  padding-left: 0;\n`;\n\nexport const CheckboxStyled = styled(Checkbox)`\n  @media screen and (max-width: 400px) {\n    padding-left: 0;\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { ListItemAvatar, IconButton, Tooltip, Avatar } from '@mui/material';\nimport {\n  AccountCircle,\n  Delete,\n  Edit,\n  FavoriteBorder,\n  Favorite,\n} from '@mui/icons-material';\n\nimport { deleteContact } from 'redux/contacts/operations';\nimport { EditModal } from 'components/EditModal/EditModal';\nimport {\n  ListItemTextStyled,\n  ListItemStyled,\n  CheckboxStyled,\n} from './ContactItem.styled';\n\nexport const ContactItem = ({\n  id,\n  name,\n  number,\n  phone,\n  favorite,\n  handleAddFavorite,\n  updateFavInLocalStorage,\n}) => {\n  const [open, setOpen] = useState(false);\n  const [checked, setChecked] = useState(false);\n\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  const dispatch = useDispatch();\n\n  const handleDelete = () => {\n    updateFavInLocalStorage(id);\n    return dispatch(deleteContact(id));\n  };\n\n  const handleChangeCheckbox = () => {\n    handleAddFavorite(id);\n  };\n\n  const isFavorite = favorite.includes(id);\n\n  useEffect(() => {\n    setChecked(isFavorite);\n  }, [isFavorite]);\n\n  return (\n    <ListItemStyled\n      secondaryAction={\n        <>\n          <Tooltip title=\"Edit\">\n            <IconButton edge=\"end\" aria-label=\"edit\" onClick={handleOpen}>\n              <Edit />\n            </IconButton>\n          </Tooltip>\n\n          <Tooltip title=\"Delete\">\n            <IconButton edge=\"end\" aria-label=\"delete\" onClick={handleDelete}>\n              <Delete />\n            </IconButton>\n          </Tooltip>\n          <EditModal\n            open={open}\n            handleClose={handleClose}\n            id={id}\n            name={name}\n            number={number}\n          />\n        </>\n      }\n    >\n      <CheckboxStyled\n        label=\"favorite\"\n        size=\"small\"\n        icon={<FavoriteBorder />}\n        checkedIcon={<Favorite />}\n        onChange={handleChangeCheckbox}\n        checked={checked}\n      />\n      <ListItemAvatar>\n        <Avatar>\n          <AccountCircle />\n        </Avatar>\n      </ListItemAvatar>\n      <ListItemTextStyled primary={name} secondary={number || phone} />\n    </ListItemStyled>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string,\n};\n","import { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { Box, Tab } from '@mui/material';\nimport TabContext from '@mui/lab/TabContext';\nimport TabList from '@mui/lab/TabList';\nimport TabPanel from '@mui/lab/TabPanel';\n\nimport { ContactItem } from 'components/ContactItem';\n\nexport const ContactList = () => {\n  const [addFavorite, setAddFavorite] = useState(\n    JSON.parse(localStorage.getItem('favorite')) ?? []\n  );\n  console.log('addFavorite', addFavorite);\n  const [value, setValue] = useState('all');\n  const [favFilter, setFavFilter] = useState([]);\n\n  const contacts = useSelector(state => state.contacts.contacts);\n  const filter = useSelector(state => state.filter);\n\n  const normalizedFilter = filter.toLowerCase();\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n\n  const handleChange = (event, status) => {\n    if (status === 'favorite') {\n      const filterFav = filteredContacts.filter(obj =>\n        addFavorite.includes(obj.id)\n      );\n\n      setFavFilter(filterFav);\n    }\n    setValue(status);\n  };\n\n  const updateFavInLocalStorage = id => {\n    const upadateFav = addFavorite.filter(fav => fav !== id);\n    return setAddFavorite(upadateFav);\n  };\n\n  const handleAddFavorite = id => {\n    setAddFavorite(prevFavorite =>\n      prevFavorite.includes(id)\n        ? prevFavorite.filter(favId => favId !== id)\n        : [...prevFavorite, id]\n    );\n  };\n\n  useEffect(() => {\n    localStorage.setItem('favorite', JSON.stringify(addFavorite));\n  }, [addFavorite]);\n\n  return (\n    <>\n      <TabContext value={value}>\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <TabList onChange={handleChange} aria-label=\"lab API tabs example\">\n            <Tab label=\"all\" value=\"all\" />\n            <Tab label=\"favotite\" value=\"favorite\" />\n          </TabList>\n        </Box>\n        <TabPanel value=\"all\" sx={{ padding: 0 }}>\n          {\n            <ul>\n              {filteredContacts\n                .sort((a, b) => a.name.localeCompare(b.name))\n                .map(({ id, name, phone, number }) => (\n                  <ContactItem\n                    key={id}\n                    id={id}\n                    name={name}\n                    phone={phone}\n                    number={number}\n                    handleAddFavorite={handleAddFavorite}\n                    favorite={addFavorite}\n                    updateFavInLocalStorage={updateFavInLocalStorage}\n                  />\n                ))}\n            </ul>\n          }\n        </TabPanel>\n        <TabPanel value=\"favorite\" sx={{ padding: 0 }}>\n          {\n            <ul>\n              {favFilter\n                .sort((a, b) => a.name.localeCompare(b.name))\n                .map(({ id, name, phone, number }) => (\n                  <ContactItem\n                    key={id}\n                    id={id}\n                    name={name}\n                    phone={phone}\n                    number={number}\n                    handleAddFavorite={handleAddFavorite}\n                    favorite={addFavorite}\n                    updateFavInLocalStorage={updateFavInLocalStorage}\n                  />\n                ))}\n            </ul>\n          }\n        </TabPanel>\n      </TabContext>\n    </>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { TextField } from '@mui/material';\nimport { filterChange } from 'redux/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleFilter = event => {\n    dispatch(filterChange(event.currentTarget.value));\n  };\n\n  return (\n    <TextField\n      id=\"filled-search\"\n      label=\"Put the name for search\"\n      type=\"search\"\n      variant=\"filled\"\n      onChange={handleFilter}\n    />\n  );\n};\n","import styled from '@emotion/styled';\nimport { Typography } from '@mui/material';\n\nexport const TypographyStyled = styled(Typography)`\n  text-align: center;\n  color: ${p => p.theme.palette.text.primary};\n`;\n","import PropTypes from 'prop-types';\nimport { TypographyStyled } from './Notification.styled';\n\nexport function Notification({ msg }) {\n  return <TypographyStyled>{msg}</TypographyStyled>;\n}\n\nNotification.propTypes = {\n  msg: PropTypes.string.isRequired,\n};\n","export const getContacts = state => state.contacts.contacts;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n\nexport const getStatusFilter = state => state.filter;","import styled from '@emotion/styled';\nimport { Box, Typography } from '@mui/material';\n\nexport const WrapPage = styled(Box)`\n  padding: 100px 10px 30px 10px;\n  height: 100dvh;\n`;\n\nexport const MainBox = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  gap: 14px;\n  margin: 0 auto;\n  max-width: 350px;\n\n  padding: 12px;\n  border-radius: 16px;\n  background-color: ${p => p.theme.palette.background.secondary};\n`;\n\nexport const TypographyStyled = styled(Typography)`\n  font-weight: 700;\n  text-align: center;\n  color: ${p => p.theme.palette.text.primary};\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Toaster } from 'react-hot-toast';\n\nimport { ContactForm } from 'components/ContactForm';\nimport { ContactList } from 'components/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Notification } from 'components/Notification/Notification';\nimport { getError, getIsLoading } from 'redux/contacts/selectors';\n\nimport { fetchContacts } from 'redux/contacts/operations';\n\nimport { MainBox, TypographyStyled, WrapPage } from './ContactsPage.styled';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  const contacts = useSelector(state => state.contacts.contacts);\n  const filter = useSelector(state => state.filter);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <WrapPage>\n      <MainBox>\n        <Toaster position=\"top-center\" reverseOrder={false} />\n\n        <TypographyStyled variant=\"h4\" component=\"h1\">\n          Phonebook\n        </TypographyStyled>\n\n        <ContactForm />\n\n        <TypographyStyled variant=\"h5\" component=\"h2\">\n          Contacts\n        </TypographyStyled>\n\n        {contacts.length > 0 || filter ? (\n          <Filter />\n        ) : (\n          <Notification msg=\"No contacts added\" />\n        )}\n        {isLoading && !error && <b>Request in progress...</b>}\n\n        <ContactList />\n      </MainBox>\n    </WrapPage>\n  );\n}\n"],"names":["FormStyled","styled","schema","yup","shape","name","min","required","number","phone","ContactForm","dispatch","useDispatch","contacts","useSelector","state","formik","useFormik","initialValues","validationSchema","onSubmit","values","resetForm","some","contact","toLowerCase","alert","addContact","handleSubmit","TextField","fullWidth","id","label","value","onChange","handleChange","onBlur","handleBlur","error","touched","Boolean","errors","helperText","type","Button","color","variant","BoxStyled","Box","p","theme","palette","background","modal","BoxWpap","TypographyStyled","Typography","text","primary","EditModal","open","handleClose","updateContact","editContact","Modal","onClose","component","sx","onClick","ListItemTextStyled","ListItemText","ListItemStyled","ListItem","CheckboxStyled","Checkbox","ContactItem","favorite","handleAddFavorite","updateFavInLocalStorage","useState","setOpen","checked","setChecked","isFavorite","includes","useEffect","secondaryAction","Tooltip","title","IconButton","edge","Edit","deleteContact","Delete","size","icon","FavoriteBorder","checkedIcon","Favorite","ListItemAvatar","Avatar","AccountCircle","secondary","ContactList","JSON","parse","localStorage","getItem","addFavorite","setAddFavorite","console","log","setValue","favFilter","setFavFilter","normalizedFilter","filter","filteredContacts","upadateFav","fav","prevFavorite","favId","setItem","stringify","TabContext","borderBottom","borderColor","TabList","event","status","filterFav","obj","Tab","TabPanel","padding","sort","a","b","localeCompare","map","Filter","filterChange","currentTarget","Notification","msg","getIsLoading","isLoading","getError","WrapPage","MainBox","ContactsPage","fetchContacts","position","reverseOrder","length"],"sourceRoot":""}